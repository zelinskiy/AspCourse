@model AspCourse.Models.AccountViewModels.ProfileViewModel

<script>

    var isModer = false;

    function updateUserData() {
        $.post({
            url: "/Profile/UpdateUser",
            data:{
                NickName:$("#NickNamePicker").val(),
                AvatarUrl: $("#AvatarUrlPicker").val(),
                Color: $("#ColorPicker").val()
            },
            success: function (data) {
                console.log(data);
                window.location.reload();
            }
        });
    }


    function banUser() {      
        $.post({
            url: "/Profile/Ban/?username=@Model.User.UserName&time=" + getDeltaTime(),
            success: function (data) {
                console.log(data);                
                window.location.reload();
            }
        });
    }

    function getDeltaTime() {
        var until = new Date($("#dateTimePicker").val());
        var deltatime = Math.floor((until - new Date()) / 60000 + until.getTimezoneOffset());
        return deltatime;
    }

    function muteUser() {
        $.post({
            url: "/Profile/Mute/?username=@Model.User.UserName&time=" + getDeltaTime(),
            success: function (data) {
                console.log(data);
                window.location.reload();
            }
        });
    }

    function unBanUser() {
        $.post({
            url: "/Profile/UnBan/?username=@Model.User.UserName",
            success: function (data) {
                console.log(data);
                window.location.reload();
            }
        });
    }

    function unMuteUser() {
        $.post({
            url: "/Profile/UnMute/?username=@Model.User.UserName",
            success: function (data) {
                console.log(data);
                window.location.reload();
            }
        });
    }

    function isUserModer() {
        $.post({
            url: "/Profile/IsModer/?username=@Model.User.UserName",
            success: function (data) {
                console.log(data);
                if (data.toString().indexOf("true")>-1) {
                    $("#toggleModerButton").css("background-color", "green");
                }
                else {
                    $("#toggleModerButton").css("background-color", "red");
                }
            }
        });
    }


    function toggleUserModer() {
        $.post({
            url: "/Profile/ToggleModer/?username=@Model.User.UserName",
            success: function (data) {
                console.log(data);
                isUserModer();
            }
        });
    }



    

    function uploadImage() {
        var data = new FormData($("#uploadForm")[0]);

        $.ajax({
            url: '@Url.Action("AddFile", "File")',
            type: "POST",
            data: data,
            contentType: false,
            dataType: false,
            processData: false,
            success: function (result) {
                $("#AvatarUrlPicker").val("/uploads/" + result);
            }
        });
    }


    $(document).ready(function () {
        isUserModer();
    });



</script>

@{ 
    if (Model.User.IsBanned)
    {
        <h1>BANNED</h1>
        <p>@Model.User.BannedUntil</p>
    }
    if (Model.User.IsMuted)
    {
        <h1>MUTED</h1>
        <p>@Model.User.MutedUntil</p>
    }
}

@{
    if (Model.IsModer)
    {
        if (Model.User.IsBanned)
        {
            <button onclick="unBanUser()">UNBAN</button>
        }
        else
        {
            <button onclick="banUser()">BAN</button>
        }
        if (Model.User.IsMuted)
        {
            <button onclick="unMuteUser()">UNMUTE</button>
        }
        else
        {
            <button onclick="muteUser()">MUTE</button>
        }

        <button id="toggleModerButton" onclick="toggleUserModer()">MODER</button>

        <input type="datetime-local" value="" id="dateTimePicker"/>
        <button onclick="f()">!!!</button>
    }
}
<hr />

<img src="@Model.User.AvatarUrl" width="300px"/>
<hr />
<p>Id: @Model.User.Id</p>
<p>NickName: @Model.User.NickName</p>
<p>UserName: @Model.User.UserName</p>
<p>Registered: @Model.User.RegisteredAt.ToLocalTime()</p>
<p>Last Seen: @Model.User.LastSeenAt.ToLocalTime()</p>
<hr />

<hr />
@{
    if (Model.IsMyself)
    {
        <p>Color: <input type="color" id="ColorPicker" value="@Model.User.Color" /></p>
        <p>Avatar: <input type="text" id="AvatarUrlPicker" value="@Model.User.AvatarUrl" /></p>

        <form id="uploadForm" enctype="multipart/form-data">
            <input type="file" name="file" onchange="uploadImage()" />
        </form>

        <p>NickName: <input type="text" id="NickNamePicker" value="@Model.User.NickName" /></p>
        <p><button onclick="updateUserData()">Update profile</button></p>
    }
}

<hr />
@if (Model.IsMyself)
{
    <a href="/Profile/MySubscriptions">Subscriptions</a>
    <a href="/Profile/MyLikes">Liked</a>
    <a href="/Profile/MyDislikes">Disliked</a>
    <a href="/Profile/MyStars">Starred</a>
}

<h2>@ViewData["MessageListTitle"]</h2>
@{    
    foreach (var msg in Model.UserMessages.OrderByDescending(m=>m.CreatedAt))
    {


        <div id="@msg.Id" class="well" style="background-color:@msg.Author.Color">
            <img src="@msg.Author.AvatarUrl" height="50" />
            <p>
                At topic <a href="/Chat/Topic/@msg.Topic.Id">@msg.Topic.Title</a>:
                <br />
                <a href="~/Profile/GetUser/?username=@msg.Author.Id">@msg.Author.NickName</a> 
                write at <a href="/Chat/Topic/@msg.Topic.Id#@msg.Id">@msg.CreatedAt.ToLocalTime()</a>
            </p>

            <p>@Html.Raw(msg.Text.Replace("\n", " <br />"))</p>

            @if (!string.IsNullOrEmpty(msg.PictureUrl))
            {
                <p><a target="_blank" href="@msg.PictureUrl"><img src="@msg.PictureUrl" height="300" /></a></p>
            }

        </div>
    }
}

